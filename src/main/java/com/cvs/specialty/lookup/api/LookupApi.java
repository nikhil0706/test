/**
 * NOTE: This class is auto generated by the swagger code generator program (2.2.3).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package com.cvs.specialty.lookup.api;

import java.util.List;

import javax.servlet.http.HttpServletResponse;
import javax.validation.Valid;
import javax.validation.constraints.NotNull;

import org.springframework.http.ResponseEntity;
import org.springframework.validation.BindException;
import org.springframework.web.bind.annotation.*;

import com.cvs.specialty.lookup.exception.LookupApiException;
import com.cvs.specialty.lookup.model.*;

import io.swagger.annotations.*;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2018-01-13T01:32:53.564Z")

@Api(value = "lookup", description = "the lookup API")
public interface LookupApi {

    @ApiOperation(value = "Validate the address from USPS", notes = "", response = AddressValidationResponse.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Address validation response", response = AddressValidationResponse.class),
        @ApiResponse(code = 400, message = "Bad Request", response = ErrorResponse.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = Void.class),
        @ApiResponse(code = 404, message = "Not Found", response = Void.class),
        @ApiResponse(code = 500, message = "Unexpected error", response = ErrorResponse.class) })
    
    @RequestMapping(value = "/lookup/address",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<?> lookupAddressPost(@ApiParam(value = "Unique identifier for this request." ,required=true) @RequestHeader(value="serviceId", required=true) String serviceId,@ApiParam(value = "Logged in user Id" ,required=true) @RequestHeader(value="userId", required=true) String userId,@ApiParam(value = "Unique identifier for this request." ,required=true) @RequestHeader(value="messageId", required=true) String messageId,@ApiParam(value = "Address Validation request. Max 5" ,required=true )  @Valid @RequestBody AddressValidationRequest addressValidationRequest);


    @ApiOperation(value = "Find the icd code", notes = "", response = PatientDiagnosis.class, responseContainer = "List", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "List of cg ref codes retrieved", response = PatientDiagnosis.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Bad Request", response = ErrorResponse.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = Void.class),
        @ApiResponse(code = 404, message = "Not Found", response = Void.class),
        @ApiResponse(code = 500, message = "Unexpected error", response = ErrorResponse.class) })
    
    @RequestMapping(value = "/lookup/icdcodes",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<?> lookupIcdcodesGet(@ApiParam(value = "Unique identifier for this request." ,required=true) @RequestHeader(value="serviceId", required=true) String serviceId,@ApiParam(value = "Logged in user Id" ,required=true) @RequestHeader(value="userId", required=true) String userId,@ApiParam(value = "Unique identifier for this request." ,required=true) @RequestHeader(value="messageId", required=true) String messageId, @NotNull@ApiParam(value = "Icd Type of the icd code to be found", required = true) @RequestParam(value = "icdType", required = true) String icdType,@ApiParam(value = "Icd Code to search for.") @RequestParam(value = "icdCode", required = false) String icdCode,@ApiParam(value = "Icd Description to search for.") @RequestParam(value = "icdDescription", required = false) String icdDescription);


    @ApiOperation(value = "Find the cg ref code", notes = "", response = CgRefCodeResponse.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "List of cg ref codes retrieved", response = CgRefCodeResponse.class),
        @ApiResponse(code = 400, message = "Bad Request", response = ErrorResponse.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = Void.class),
        @ApiResponse(code = 404, message = "Not Found", response = Void.class),
        @ApiResponse(code = 500, message = "Unexpected error", response = ErrorResponse.class) })
    
    @RequestMapping(value = "/lookup/refcodes",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<?> lookupRefcodesGet(@ApiParam(value = "Unique identifier for this request." ,required=true) @RequestHeader(value="serviceId", required=true) String serviceId,@ApiParam(value = "Logged in user Id" ,required=true) @RequestHeader(value="userId", required=true) String userId,@ApiParam(value = "Unique identifier for this request." ,required=true) @RequestHeader(value="messageId", required=true) String messageId,@ApiParam(value = "Access token for this request", required = true) @RequestHeader(value="access-token", required=true) String accessToken, @NotNull@ApiParam(value = "Rv Domain Id of the result to be found", required = true) @RequestParam(value = "codeDomainName", required = true) List<String> codeDomainName,@ApiParam(value = "Rv Low value of the result to be found") @RequestParam(value = "codeLowValueText", required = false) List<String> codeLowValueText,HttpServletResponse response) throws BindException,LookupApiException;


    @ApiOperation(value = "Retrieves the state, city, and country for a given zip code in Sparcs DB", notes = "", response = PartyAddress.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Associated state, city, and country", response = PartyAddress.class),
        @ApiResponse(code = 400, message = "Bad Request", response = ErrorResponse.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = Void.class),
        @ApiResponse(code = 404, message = "Not Found", response = Void.class),
        @ApiResponse(code = 500, message = "Unexpected error", response = ErrorResponse.class) })
    
    @RequestMapping(value = "/lookup/zipcode",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<?> lookupZipcodeGet(@ApiParam(value = "Unique identifier for this request" ,required=true) @RequestHeader(value="serviceId", required=true) String serviceId,@ApiParam(value = "Logged in user Id" ,required=true) @RequestHeader(value="userId", required=true) String userId,@ApiParam(value = "Unique identifier for this request" ,required=true) @RequestHeader(value="messageId", required=true) String messageId, @ApiParam(value = "Access token for this request", required = true) @RequestHeader(value="access-token", required=true) String accessToken, @NotNull@ApiParam(value = "Five digit zip code", required = true) @RequestParam(value = "zipCode", required = true) String zipCode) throws BindException,LookupApiException;

 
}